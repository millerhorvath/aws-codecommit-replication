# This is a basic workflow to help you get started with Actions

name: CodeCommitReplication

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev", "prd" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  environment_check:
    runs-on: ubuntu-latest
    steps:    
      - name: Set environment based on branch
        id: branch_check
        run: |
          echo "Running on branch ${{ github.ref }}"
          if [ "${{ github.ref }}" = "refs/heads/prd" ]; then
            echo "env_name=Production"  >> $GITHUB_OUTPUT
            echo "local_branch=prd"  >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
            echo "env_name=Development" >> $GITHUB_OUTPUT
            echo "local_branch=dev" >> $GITHUB_OUTPUT
          fi
      
      - name: Display environment check
        run: echo "Using ${{ steps.branch_check.outputs.env_name }} for branch ${{ github.ref }}"

    outputs:
      env_name: ${{ steps.branch_check.outputs.env_name }}
      local_branch: ${{ steps.branch_check.outputs.local_branch }}

  code_replication:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [environment_check]
    environment:
      name: ${{ needs.environment_check.outputs.env_name }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      # - uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_DEPLOY_KEY }}
      - name: Configure SSH and push to destination repository
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
          CODECOMMIT_HOST: ${{ secrets.CODECOMMIT_HOST }}
          SSH_KEY_ID: ${{ secrets.SSH_KEY_ID }}
          CODECOMMIT_REPO: ${{ secrets.CODECOMMIT_REPO }}
          REMOTE_BRANCH_NAME: ${{ secrets.BRANCH_NAME }}
          LOCAL_BRANCH_NAME: ${{ needs.environment_check.outputs.local_branch }}
        run: |
          echo "### Configure SSH"
          
          echo "# Create default .ssh path, if not exists"
          mkdir -p ~/.ssh
          echo "# Set .ssh permissions"
          chmod 700 ~/.ssh
          
          echo "# Create SSH private key"
          echo "$SSH_DEPLOY_KEY" > ~/.ssh/id_rsa
          echo "# Set ~/.ssh/id_rsa permissions"
          chmod 600 ~/.ssh/id_rsa

          echo "# Add host in ssh know_hosts"
          ssh-keyscan -H $CODECOMMIT_HOST > ~/.ssh/known_hosts
          echo "# Set ~/.ssh/known_hosts permissions"
          chmod 600 ~/.ssh/known_hosts

          # echo "# Set-up git"
          # git config --global user.name "${INPUT_GIT_USERNAME}"
          # git config --global user.email "${INPUT_GIT_EMAIL}"
          # ssh-keyscan -H $CODECOMMIT_HOST > ~/.ssh/known_hosts
          # GIT_SSH='ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=~/.ssh/known_hosts'
          
          echo "# create SSH config file"
          cat >~/.ssh/config <<END
          Host $CODECOMMIT_HOST
              User $SSH_KEY_ID
              IdentityFile ~/.ssh/id_rsa
          END

          echo "# Listing created files"
          ls -ald ~/.ssh
          ls -al ~/.ssh          
          
          echo "### Test ssh"
          echo $(ssh $SSH_KEY_ID@$CODECOMMIT_HOST)
          # echo $($GIT_SSH $SSH_KEY_ID@$CODECOMMIT_HOST)
          
          echo "### Add remote"
          git remote add codecommit $CODECOMMIT_REPO
          
          echo "### Push code - git push -u codecommit $LOCAL_BRANCH_NAME:$REMOTE_BRANCH_NAME"
          git push -u codecommit $LOCAL_BRANCH_NAME:$REMOTE_BRANCH_NAME
          # GIT_SSH_COMMAND=$GIT_SSH git push -u codecommit $LOCAL_BRANCH_NAME:$REMOTE_BRANCH_NAME
